// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var KEY_CODE, activeStatement, clearStatementProblems, clickPos, createNewStatementContainer, currComputation, currElement, deleteCurrElementAndBacktrack, evaluateSolution, fakeComplete, getEquationTokensForStatement, getLastNonCommentElement, newComment, newComparator, newNumber, newOperator, selectedElement, statementProblem, updateComp, updateEvaluationForStatement;
    KEY_CODE = {
      'min_num': 48,
      'max_num': 57,
      1: 49,
      2: 50,
      3: 51,
      4: 52,
      5: 53,
      6: 54,
      7: 55,
      8: 56,
      9: 57,
      0: 48,
      'backspace': 8,
      'delete': 46,
      'minus': 45,
      'plus': 43,
      'divide': 47,
      'equals': 61,
      'multiply': 42,
      'paren_open': 57,
      'paren_close': 48,
      'space': 32,
      'return': 13,
      'esc': 27
    };
    clickPos = {
      x: null,
      y: null
    };
    selectedElement = null;
    activeStatement = $('.statement')[0];
    currElement = null;
    currComputation = $('.computation')[0];
    getLastNonCommentElement = function() {
      var lastNonComment;
      if ($(currElement).hasClass('number') || $(currElement).hasClass('operator') || currElement === null) {
        return currElement;
      }
      lastNonComment = null;
      while (!(lastNonComment != null) || $(lastNonComment).hasClass('comment')) {
        lastNonComment = currElement.previousElementSibling;
      }
      if ($(lastNonComment).hasClass('number') || $(lastNonComment).hasClass('operator')) {
        return lastNonComment;
      } else {
        return null;
      }
    };
    deleteCurrElementAndBacktrack = function() {
      var cmp, elementToDelete, statementToDelete;
      console.log(currElement);
      if (currElement != null) {
        elementToDelete = currElement;
        currElement = currElement.previousElementSibling;
        return $(elementToDelete).remove();
      } else {
        cmp = activeStatement.parentElement.previousElementSibling;
        console.log(cmp);
        if ($(cmp).hasClass('comparator')) {
          statementToDelete = activeStatement;
          activeStatement = $(cmp.previousElementSibling).children('.statement')[0];
          $(cmp).remove();
          $(statementToDelete.parentNode).remove();
          return currElement = $(activeStatement).children('.element').last()[0];
        }
      }
    };
    $(window).keydown(function(e) {
      var v;
      if (!e.shiftKey && !e.metaKey && !e.ctrlKey && !e.altKey) {
        switch (e.which) {
          case KEY_CODE['backspace']:
            if ($(currElement).hasClass('comment') || $(currElement).hasClass('number')) {
              v = $(currElement).html();
              if (v.length > 1) {
                $(currElement).html(v.substring(0, v.length - 1));
              } else {
                deleteCurrElementAndBacktrack();
              }
            } else {
              deleteCurrElementAndBacktrack();
            }
            return updateComp();
          case KEY_CODE['delete']:
            deleteCurrElementAndBacktrack();
            return updateComp();
        }
      }
    });
    $(window).keypress(function(e) {
      var operatorHelper, v, _ref;
      if (!e.metaKey && !e.ctrlKey && !e.altKey) {
        if (((KEY_CODE['min_num'] <= (_ref = e.which) && _ref <= KEY_CODE['max_num'])) && !e.shiftKey) {
          if (!$(currElement).hasClass('number')) {
            currElement = newNumber();
          }
          v = $(currElement).html() + (e.which - KEY_CODE['min_num']);
          $(currElement).html(v);
        } else {
          operatorHelper = function(op) {
            if (!getLastNonCommentElement()) {
              if (op === '-') {
                currElement = newNumber();
                return $(currElement).html('-');
              } else {
                return currElement = newOperator(op);
              }
            } else if ($(getLastNonCommentElement()).hasClass('number')) {
              return currElement = newOperator(op);
            } else if ($(getLastNonCommentElement()).hasClass('operator')) {
              if (op === '-') {
                currElement = newNumber();
                return $(currElement).html(op);
              } else if ($(currElement).hasClass('comment')) {
                return currElement = newOperator(op);
              } else {
                return $(currElement).html(op);
              }
            }
          };
          if ($(currElement).hasClass('number') && $(currElement).html() === '-') {
            $(currElement).removeClass('number').addClass('operator');
          }
          switch (e.which) {
            case KEY_CODE['plus']:
              if (e.shiftKey) {
                operatorHelper('+');
              }
              break;
            case KEY_CODE['minus']:
              if (!e.shiftKey) {
                operatorHelper('-');
              }
              break;
            case KEY_CODE['divide']:
              if (!e.shiftKey) {
                operatorHelper('/');
              }
              break;
            case KEY_CODE['multiply']:
              if (e.shiftKey) {
                operatorHelper('*');
              }
              break;
            case KEY_CODE['equals']:
              newComparator('=');
              break;
            default:
              if (e.which !== 0 && e.charCode !== 0) {
                if (!$(currElement).hasClass('comment')) {
                  currElement = newComment();
                }
                v = $(currElement).html() + String.fromCharCode(e.which);
                $(currElement).html(v);
              }
          }
        }
      }
      return updateComp();
    });
    $(window).mousemove(function(e) {
      var d, v;
      if ((clickPos.x != null) && (clickPos.y != null) && (selectedElement != null) && $(selectedElement).hasClass('number')) {
        v = Number($(selectedElement).html());
        d = Math.round(e.screenX - clickPos.x);
        $(selectedElement).html(d + v);
        updateComp();
        clickPos.x = e.screenX;
        return clickPos.y = e.screenY;
      }
    });
    $(window).mouseup(function(e) {
      return selectedElement = null;
    });
    newNumber = function() {
      var e;
      e = document.createElement('span');
      $(e).addClass('element');
      $(e).addClass('number');
      if (currElement != null) {
        $(e).insertAfter(currElement);
      } else {
        $(e).appendTo(activeStatement);
      }
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
    newOperator = function(op) {
      var e;
      e = document.createElement('span');
      $(e).html(op);
      $(e).addClass('element');
      $(e).addClass('operator');
      if (currElement != null) {
        $(e).insertAfter(currElement);
      } else {
        $(e).appendTo(activeStatement);
      }
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
    newComparator = function(cmp) {
      var activeStatementContainer, e;
      e = document.createElement('span');
      $(e).html(cmp);
      $(e).addClass('element');
      $(e).addClass('comparator');
      $(e).insertAfter(activeStatement.parentNode);
      activeStatementContainer = createNewStatementContainer();
      activeStatement = $(activeStatementContainer).children('.statement')[0];
      $(activeStatementContainer).appendTo(currComputation);
      return currElement = null;
    };
    createNewStatementContainer = function(isFake) {
      var container, evl, statement;
      if (isFake == null) {
        isFake = false;
      }
      container = document.createElement('span');
      if (isFake) {
        $(container).addClass('fake-statement-container');
      } else {
        $(container).addClass('statement-container');
      }
      statement = document.createElement('div');
      $(statement).addClass('statement');
      if (!isFake) {
        evl = document.createElement('div');
        $(evl).addClass('eval');
      }
      $(statement).appendTo(container);
      if (!isFake) {
        $(evl).appendTo(container);
      }
      return container;
    };
    newComment = function() {
      var e;
      e = document.createElement('span');
      $(e).addClass('element');
      $(e).addClass('comment');
      if (currElement != null) {
        $(e).insertAfter(currElement);
      } else {
        $(e).appendTo(activeStatement);
      }
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
    clearStatementProblems = function(statement) {
      return $(statement).removeClass('error');
    };
    statementProblem = function(statement) {
      return $(statement).addClass('error');
    };
    getEquationTokensForStatement = function(statement) {
      var e, eqnString, eqnTokens, lastToken, t, tokens, _i, _j, _len, _len1, _ref;
      eqnString = "";
      _ref = $(statement).children();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if ($(e).hasClass('element') && !$(e).hasClass('comment')) {
          eqnString += $(e).html() + ' ';
        }
      }
      tokens = eqnString.tokens();
      lastToken = null;
      eqnTokens = [];
      for (_j = 0, _len1 = tokens.length; _j < _len1; _j++) {
        t = tokens[_j];
        if ((lastToken != null) && lastToken.type === 'operator' && t.type === 'number' && lastToken.value === '-') {
          if ((eqnTokens.length > 1 && eqnTokens[eqnTokens.length - 2].type === 'operator') || eqnTokens.length === 1) {
            eqnTokens.pop();
            t.value = '-' + t.value;
          }
        }
        if (t.type !== 'name') {
          eqnTokens.push(t);
          lastToken = t;
        }
      }
      return eqnTokens;
    };
    evaluateSolution = function(tokens) {
      var e, eqnString, t, _i, _len;
      eqnString = "";
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        t = tokens[_i];
        if (t.type !== 'name') {
          eqnString += t.value + ' ';
        }
      }
      e = eval(eqnString);
      if (e != null) {
        return e;
      }
      return '';
    };
    updateEvaluationForStatement = function(statement, goal) {
      var completionNum, err, lastNonComment, lastToken, res, t, tokens, _i, _len;
      completionNum = null;
      err = 0;
      clearStatementProblems(statement);
      tokens = getEquationTokensForStatement(statement);
      if (tokens.length > 0) {
        lastNonComment = null;
        lastToken = null;
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          t = tokens[_i];
          if (t.type !== 'name') {
            if (!lastNonComment) {
              if (t.type === 'operator') {
                console.log("statements can't start with an operator");
                statementProblem(statement, t, 'A Number is Missing');
                err += 1;
              }
            } else {
              if (lastNonComment.type === 'operator' && t.type === 'operator') {
                console.log("statements can't have two operators without a number between them");
                statementProblem(statement, lastNonComment, lastToken, t, 'A Number is Missing');
                err += 1;
              } else if (lastNonComment.type === 'number' && t.type === 'number') {
                console.log("statements can't have two numbers without an operator between them");
                statementProblem(statement, lastNonComment, lastToken, t, 'An Operator is Missing');
                err += 1;
              }
            }
            lastNonComment = t;
          }
          lastToken = t;
        }
        if (lastNonComment.type === 'operator') {
          console.log("statements can't end with operators");
          statementProblem(statement, lastNonComment, 'A Number is Missing');
          err += 1;
        }
      }
      res = null;
      if (err === 0) {
        res = evaluateSolution(tokens);
        $(statement).siblings('.eval').html(res);
        console.log('no error');
      } else {
        $(statement).siblings('.eval').html('!');
      }
      if (res != null) {
        return [res, goal - res];
      } else {
        return [res, null];
      }
    };
    fakeComplete = function(statement, val) {
      var addOp, e, fakeStatement, fakeStatementContainer;
      fakeStatementContainer = createNewStatementContainer(true);
      fakeStatement = $(fakeStatementContainer).children('.statement')[0];
      $(fakeStatementContainer).insertAfter(statement.parentElement);
      addOp = true;
      if ($(statement).children('.element').length === 0) {
        addOp = false;
      }
      if (addOp) {
        e = document.createElement('span');
        if (val >= 0) {
          $(e).html('+');
        } else {
          $(e).html('-');
        }
        $(e).addClass('fake-element');
        $(e).addClass('operator');
        $(e).appendTo(fakeStatement);
      }
      e = document.createElement('span');
      if (addOp) {
        $(e).html(Math.abs(val));
      } else {
        $(e).html(val);
      }
      $(e).addClass('fake-element');
      $(e).addClass('number');
      $(e).appendTo(fakeStatement);
      return $(fakeStatement).appendTo(fakeStatementContainer);
    };
    return updateComp = function() {
      var cmp, diff, newVal, oldVal, propagationVal, statement, _i, _len, _ref, _ref1, _results;
      oldVal = null;
      propagationVal = null;
      $('.fake-statement-container').remove();
      _ref = $(currComputation).children('.statement-container').children('.statement');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        statement = _ref[_i];
        _ref1 = updateEvaluationForStatement(statement, propagationVal), newVal = _ref1[0], diff = _ref1[1];
        if (oldVal != null) {
          cmp = $(statement).parent().prev();
          switch (cmp.html()) {
            case '=':
              if (newVal !== propagationVal) {
                console.log('Equation Inconsistency!');
                cmp.addClass('error');
                if (newVal != null) {
                  fakeComplete(statement, diff);
                  console.log('Diff: ' + diff);
                }
              } else {
                cmp.removeClass('error');
              }
          }
        } else if (newVal != null) {
          propagationVal = newVal;
        }
        _results.push(oldVal = newVal);
      }
      return _results;
    };
  });

}).call(this);
