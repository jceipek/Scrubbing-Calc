// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var KEY_CODE, clickPos, currElement, deleteCurrElementAndBacktrack, newComment, newNumber, newOperator, selectedElement;
    KEY_CODE = {
      'min_num': 48,
      'max_num': 57,
      1: 49,
      2: 50,
      3: 51,
      4: 52,
      5: 53,
      6: 54,
      7: 55,
      8: 56,
      9: 57,
      0: 48,
      'backspace': 8,
      'delete': 46,
      'minus': 45,
      'plus': 43,
      'divide': 47,
      'multiply': 42,
      'paren_open': 57,
      'paren_close': 48,
      'space': 32,
      'return': 13,
      'esc': 27
    };
    clickPos = {
      x: null,
      y: null
    };
    selectedElement = null;
    currElement = null;
    deleteCurrElementAndBacktrack = function() {
      var elementToDelete;
      elementToDelete = currElement;
      currElement = currElement.previousSibling;
      console.log(currElement);
      if (!$(currElement).hasClass('number') && !$(currElement).hasClass('operator') && !$(currElement).hasClass('comment')) {
        currElement = null;
      }
      return $(elementToDelete).remove();
    };
    $(window).keydown(function(e) {
      var v;
      if (!e.shiftKey && !e.metaKey && !e.ctrlKey && !e.altKey) {
        switch (e.which) {
          case KEY_CODE['backspace']:
            if ($(currElement).hasClass('comment')) {
              v = $(currElement).html();
              if (v.length > 1) {
                return $(currElement).html(v.substring(0, v.length - 1));
              } else {
                return deleteCurrElementAndBacktrack();
              }
            } else if ($(currElement).hasClass('number')) {
              return deleteCurrElementAndBacktrack();
            } else if ($(currElement).hasClass('operator')) {
              return deleteCurrElementAndBacktrack();
            }
        }
      }
    });
    $(window).keypress(function(e) {
      var operatorHelper, v, _ref;
      if (!e.metaKey && !e.ctrlKey && !e.altKey) {
        if (((KEY_CODE['min_num'] <= (_ref = e.which) && _ref <= KEY_CODE['max_num'])) && !e.shiftKey) {
          if (!$(currElement).hasClass('number')) {
            currElement = newNumber();
          }
          console.log('Plain Number');
          v = $(currElement).html() + (e.which - KEY_CODE['min_num']);
          return $(currElement).html(v);
        } else {
          operatorHelper = function(op) {
            if ($(currElement).hasClass('number') || $(currElement).hasClass('comment')) {
              return currElement = newOperator(op);
            } else if ($(currElement).hasClass('operator')) {
              return $(currElement).html(op);
            }
          };
          console.log(e.which);
          switch (e.which) {
            case KEY_CODE['plus']:
              if (e.shiftKey) {
                return operatorHelper('+');
              }
              break;
            case KEY_CODE['minus']:
              if (!e.shiftKey) {
                return operatorHelper('-');
              }
              break;
            case KEY_CODE['divide']:
              if (!e.shiftKey) {
                return operatorHelper('/');
              }
              break;
            case KEY_CODE['multiply']:
              if (e.shiftKey) {
                return operatorHelper('*');
              }
              break;
            default:
              console.log('Here we are again');
              console.log(e);
              if (e.which !== 0 && e.charCode !== 0) {
                if (!$(currElement).hasClass('comment')) {
                  currElement = newComment();
                }
                v = $(currElement).html() + String.fromCharCode(e.which);
                return $(currElement).html(v);
              }
          }
        }
      }
    });
    $(window).mousemove(function(e) {
      var d, v;
      if ((clickPos.x != null) && (clickPos.y != null) && (selectedElement != null) && $(selectedElement).hasClass('number')) {
        v = Number($(selectedElement).html());
        d = Math.round(e.screenX - clickPos.x);
        $(selectedElement).html(d + v);
        clickPos.x = e.screenX;
        return clickPos.y = e.screenY;
      }
    });
    $(window).mouseup(function(e) {
      return selectedElement = null;
    });
    newNumber = function() {
      var e;
      e = document.createElement('span');
      $(e).addClass('number');
      $(e).appendTo($('.computation'));
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
    newOperator = function(op) {
      var e;
      e = document.createElement('span');
      $(e).html(op);
      $(e).addClass('operator');
      $(e).appendTo($('.computation'));
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
    return newComment = function() {
      var e;
      e = document.createElement('span');
      $(e).addClass('comment');
      $(e).appendTo($('.computation'));
      $(e).mousedown(function(e) {
        this.preventDefault;
        selectedElement = this;
        clickPos.x = e.screenX;
        clickPos.y = e.screenY;
        return false;
      });
      return e;
    };
  });

}).call(this);
